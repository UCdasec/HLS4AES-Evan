// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_424_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_load_9,
        temp_2,
        temp,
        buf_r_load_14,
        buf_r_load_10,
        temp_1,
        buf_r_load_2,
        buf_r_load_13,
        temp_3,
        buf_r_load_6,
        buf_r_load_1,
        buf_r_load_12,
        buf_r_load_8,
        buf_r_load_4,
        buf_r_load,
        buf_r_load_11,
        RoundKey_val,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        t_3_out,
        t_3_out_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        t_2_out,
        t_2_out_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        t_1_out,
        t_1_out_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        t_out,
        t_out_ap_vld,
        sbox_address0,
        sbox_ce0,
        sbox_q0,
        sbox_address1,
        sbox_ce1,
        sbox_q1,
        sbox_address2,
        sbox_ce2,
        sbox_q2,
        sbox_address3,
        sbox_ce3,
        sbox_q3,
        sbox_address4,
        sbox_ce4,
        sbox_q4,
        sbox_address5,
        sbox_ce5,
        sbox_q5,
        sbox_address6,
        sbox_ce6,
        sbox_q6,
        sbox_address7,
        sbox_ce7,
        sbox_q7,
        sbox_address8,
        sbox_ce8,
        sbox_q8,
        sbox_address9,
        sbox_ce9,
        sbox_q9,
        sbox_address10,
        sbox_ce10,
        sbox_q10,
        sbox_address11,
        sbox_ce11,
        sbox_q11,
        sbox_address12,
        sbox_ce12,
        sbox_q12,
        sbox_address13,
        sbox_ce13,
        sbox_q13,
        sbox_address14,
        sbox_ce14,
        sbox_q14,
        sbox_address15,
        sbox_ce15,
        sbox_q15
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] buf_r_load_9;
input  [7:0] temp_2;
input  [7:0] temp;
input  [7:0] buf_r_load_14;
input  [7:0] buf_r_load_10;
input  [7:0] temp_1;
input  [7:0] buf_r_load_2;
input  [7:0] buf_r_load_13;
input  [7:0] temp_3;
input  [7:0] buf_r_load_6;
input  [7:0] buf_r_load_1;
input  [7:0] buf_r_load_12;
input  [7:0] buf_r_load_8;
input  [7:0] buf_r_load_4;
input  [7:0] buf_r_load;
input  [7:0] buf_r_load_11;
input  [1535:0] RoundKey_val;
output  [7:0] p_out;
output   p_out_ap_vld;
output  [7:0] p_out1;
output   p_out1_ap_vld;
output  [7:0] p_out2;
output   p_out2_ap_vld;
output  [7:0] t_3_out;
output   t_3_out_ap_vld;
output  [7:0] p_out3;
output   p_out3_ap_vld;
output  [7:0] p_out4;
output   p_out4_ap_vld;
output  [7:0] p_out5;
output   p_out5_ap_vld;
output  [7:0] t_2_out;
output   t_2_out_ap_vld;
output  [7:0] p_out6;
output   p_out6_ap_vld;
output  [7:0] p_out7;
output   p_out7_ap_vld;
output  [7:0] p_out8;
output   p_out8_ap_vld;
output  [7:0] t_1_out;
output   t_1_out_ap_vld;
output  [7:0] p_out9;
output   p_out9_ap_vld;
output  [7:0] p_out10;
output   p_out10_ap_vld;
output  [7:0] p_out11;
output   p_out11_ap_vld;
output  [7:0] t_out;
output   t_out_ap_vld;
output  [7:0] sbox_address0;
output   sbox_ce0;
input  [7:0] sbox_q0;
output  [7:0] sbox_address1;
output   sbox_ce1;
input  [7:0] sbox_q1;
output  [7:0] sbox_address2;
output   sbox_ce2;
input  [7:0] sbox_q2;
output  [7:0] sbox_address3;
output   sbox_ce3;
input  [7:0] sbox_q3;
output  [7:0] sbox_address4;
output   sbox_ce4;
input  [7:0] sbox_q4;
output  [7:0] sbox_address5;
output   sbox_ce5;
input  [7:0] sbox_q5;
output  [7:0] sbox_address6;
output   sbox_ce6;
input  [7:0] sbox_q6;
output  [7:0] sbox_address7;
output   sbox_ce7;
input  [7:0] sbox_q7;
output  [7:0] sbox_address8;
output   sbox_ce8;
input  [7:0] sbox_q8;
output  [7:0] sbox_address9;
output   sbox_ce9;
input  [7:0] sbox_q9;
output  [7:0] sbox_address10;
output   sbox_ce10;
input  [7:0] sbox_q10;
output  [7:0] sbox_address11;
output   sbox_ce11;
input  [7:0] sbox_q11;
output  [7:0] sbox_address12;
output   sbox_ce12;
input  [7:0] sbox_q12;
output  [7:0] sbox_address13;
output   sbox_ce13;
input  [7:0] sbox_q13;
output  [7:0] sbox_address14;
output   sbox_ce14;
input  [7:0] sbox_q14;
output  [7:0] sbox_address15;
output   sbox_ce15;
input  [7:0] sbox_q15;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg t_3_out_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg t_2_out_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg t_1_out_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg t_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln428_reg_2265;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] round_1_reg_2258;
wire   [0:0] icmp_ln428_fu_697_p2;
wire   [10:0] or_ln_fu_703_p3;
reg   [10:0] or_ln_reg_2269;
wire   [11:0] add_ln244_fu_715_p2;
reg   [11:0] add_ln244_reg_2274;
wire   [10:0] or_ln244_1_fu_721_p3;
reg   [10:0] or_ln244_1_reg_2279;
wire   [11:0] add_ln244_1_fu_733_p2;
reg   [11:0] add_ln244_1_reg_2284;
wire   [11:0] add_ln244_2_fu_739_p2;
reg   [11:0] add_ln244_2_reg_2289;
wire   [11:0] add_ln244_3_fu_745_p2;
reg   [11:0] add_ln244_3_reg_2294;
wire   [10:0] or_ln244_2_fu_751_p3;
reg   [10:0] or_ln244_2_reg_2299;
wire   [11:0] add_ln244_4_fu_763_p2;
reg   [11:0] add_ln244_4_reg_2304;
wire   [11:0] add_ln244_5_fu_769_p2;
reg   [11:0] add_ln244_5_reg_2309;
wire   [11:0] add_ln244_6_fu_775_p2;
reg   [11:0] add_ln244_6_reg_2314;
wire   [11:0] add_ln244_7_fu_781_p2;
reg   [11:0] add_ln244_7_reg_2319;
wire   [11:0] add_ln244_8_fu_787_p2;
reg   [11:0] add_ln244_8_reg_2324;
wire   [11:0] add_ln244_9_fu_793_p2;
reg   [11:0] add_ln244_9_reg_2329;
wire   [11:0] add_ln244_10_fu_799_p2;
reg   [11:0] add_ln244_10_reg_2334;
reg   [7:0] t_load_reg_2339;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] p_load85_reg_2345;
reg   [7:0] t_1_load_reg_2351;
reg   [7:0] p_load78_reg_2357;
reg   [7:0] t_2_load_reg_2363;
reg   [7:0] p_load71_reg_2369;
reg   [7:0] t_3_load_reg_2375;
reg   [7:0] p_load64_reg_2381;
wire   [7:0] Tm_fu_829_p2;
reg   [7:0] Tm_reg_2387;
wire   [7:0] Tm_4_fu_835_p2;
reg   [7:0] Tm_4_reg_2395;
wire   [7:0] Tm_8_fu_841_p2;
reg   [7:0] Tm_8_reg_2403;
wire   [7:0] Tm_12_fu_847_p2;
reg   [7:0] Tm_12_reg_2411;
wire   [1535:0] lshr_ln244_fu_864_p2;
reg   [1535:0] lshr_ln244_reg_2419;
wire   [1535:0] lshr_ln244_1_fu_872_p2;
reg   [1535:0] lshr_ln244_1_reg_2424;
wire   [1535:0] lshr_ln244_2_fu_880_p2;
reg   [1535:0] lshr_ln244_2_reg_2429;
wire   [1535:0] lshr_ln244_3_fu_888_p2;
reg   [1535:0] lshr_ln244_3_reg_2434;
wire   [1535:0] lshr_ln244_4_fu_896_p2;
reg   [1535:0] lshr_ln244_4_reg_2439;
wire   [1535:0] lshr_ln244_5_fu_904_p2;
reg   [1535:0] lshr_ln244_5_reg_2444;
wire   [1535:0] lshr_ln244_6_fu_912_p2;
reg   [1535:0] lshr_ln244_6_reg_2449;
wire   [1535:0] lshr_ln244_7_fu_920_p2;
reg   [1535:0] lshr_ln244_7_reg_2454;
wire   [1535:0] lshr_ln244_8_fu_928_p2;
reg   [1535:0] lshr_ln244_8_reg_2459;
wire   [1535:0] lshr_ln244_9_fu_936_p2;
reg   [1535:0] lshr_ln244_9_reg_2464;
wire   [1535:0] lshr_ln244_10_fu_944_p2;
reg   [1535:0] lshr_ln244_10_reg_2469;
wire   [1535:0] lshr_ln244_11_fu_952_p2;
reg   [1535:0] lshr_ln244_11_reg_2474;
wire   [1535:0] lshr_ln244_12_fu_960_p2;
reg   [1535:0] lshr_ln244_12_reg_2479;
wire   [1535:0] lshr_ln244_13_fu_968_p2;
reg   [1535:0] lshr_ln244_13_reg_2484;
wire   [1535:0] lshr_ln244_14_fu_976_p2;
reg   [1535:0] lshr_ln244_14_reg_2489;
wire   [1535:0] lshr_ln244_15_fu_992_p2;
reg   [1535:0] lshr_ln244_15_reg_2494;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln258_fu_1879_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln258_1_fu_1884_p1;
wire   [63:0] zext_ln258_2_fu_1889_p1;
wire   [63:0] zext_ln258_3_fu_1894_p1;
wire   [63:0] zext_ln258_4_fu_1899_p1;
wire   [63:0] zext_ln258_5_fu_1904_p1;
wire   [63:0] zext_ln258_6_fu_1909_p1;
wire   [63:0] zext_ln258_7_fu_1914_p1;
wire   [63:0] zext_ln258_8_fu_1919_p1;
wire   [63:0] zext_ln258_9_fu_1924_p1;
wire   [63:0] zext_ln258_10_fu_1929_p1;
wire   [63:0] zext_ln258_11_fu_1934_p1;
wire   [63:0] zext_ln258_12_fu_1939_p1;
wire   [63:0] zext_ln258_13_fu_1944_p1;
wire   [63:0] zext_ln258_14_fu_1949_p1;
wire   [63:0] zext_ln258_15_fu_1954_p1;
reg   [3:0] round_fu_134;
wire   [3:0] add_ln424_fu_997_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_round_1;
reg   [7:0] t_fu_138;
reg   [7:0] ap_sig_allocacmp_t_load;
wire    ap_block_pp0_stage1;
reg   [7:0] empty_fu_142;
reg   [7:0] ap_sig_allocacmp_p_load85;
reg   [7:0] empty_30_fu_146;
reg   [7:0] empty_31_fu_150;
reg   [7:0] t_1_fu_154;
reg   [7:0] ap_sig_allocacmp_t_1_load;
reg   [7:0] empty_32_fu_158;
reg   [7:0] ap_sig_allocacmp_p_load78;
reg   [7:0] empty_33_fu_162;
reg   [7:0] empty_34_fu_166;
reg   [7:0] t_2_fu_170;
reg   [7:0] ap_sig_allocacmp_t_2_load;
reg   [7:0] empty_35_fu_174;
reg   [7:0] ap_sig_allocacmp_p_load71;
reg   [7:0] empty_36_fu_178;
reg   [7:0] empty_37_fu_182;
reg   [7:0] t_3_fu_186;
reg   [7:0] ap_sig_allocacmp_t_3_load;
reg   [7:0] empty_38_fu_190;
reg   [7:0] ap_sig_allocacmp_p_load64;
reg   [7:0] empty_39_fu_194;
reg   [7:0] empty_40_fu_198;
wire    ap_block_pp0_stage1_01001;
reg    sbox_ce15_local;
reg    sbox_ce14_local;
reg    sbox_ce13_local;
reg    sbox_ce12_local;
reg    sbox_ce11_local;
reg    sbox_ce10_local;
reg    sbox_ce9_local;
reg    sbox_ce8_local;
reg    sbox_ce7_local;
reg    sbox_ce6_local;
reg    sbox_ce5_local;
reg    sbox_ce4_local;
reg    sbox_ce3_local;
reg    sbox_ce2_local;
reg    sbox_ce1_local;
reg    sbox_ce0_local;
wire   [11:0] zext_ln244_1_fu_711_p1;
wire   [11:0] zext_ln244_17_fu_729_p1;
wire   [11:0] zext_ln244_18_fu_759_p1;
wire   [10:0] shl_ln244_1_fu_853_p3;
wire   [1535:0] zext_ln244_fu_860_p1;
wire   [1535:0] zext_ln244_2_fu_869_p1;
wire   [1535:0] zext_ln244_3_fu_877_p1;
wire   [1535:0] zext_ln244_4_fu_885_p1;
wire   [1535:0] zext_ln244_5_fu_893_p1;
wire   [1535:0] zext_ln244_6_fu_901_p1;
wire   [1535:0] zext_ln244_7_fu_909_p1;
wire   [1535:0] zext_ln244_8_fu_917_p1;
wire   [1535:0] zext_ln244_9_fu_925_p1;
wire   [1535:0] zext_ln244_10_fu_933_p1;
wire   [1535:0] zext_ln244_11_fu_941_p1;
wire   [1535:0] zext_ln244_12_fu_949_p1;
wire   [1535:0] zext_ln244_13_fu_957_p1;
wire   [1535:0] zext_ln244_14_fu_965_p1;
wire   [1535:0] zext_ln244_15_fu_973_p1;
wire   [10:0] or_ln244_3_fu_981_p3;
wire   [1535:0] zext_ln244_16_fu_988_p1;
wire   [7:0] xor_ln307_1_fu_1031_p2;
wire   [7:0] Tm_1_fu_1047_p2;
wire   [7:0] Tm_2_fu_1058_p2;
wire   [7:0] Tm_3_fu_1070_p2;
wire   [7:0] xor_ln307_3_fu_1081_p2;
wire   [7:0] Tm_5_fu_1097_p2;
wire   [7:0] Tm_6_fu_1108_p2;
wire   [7:0] Tm_7_fu_1120_p2;
wire   [7:0] xor_ln307_5_fu_1131_p2;
wire   [7:0] Tm_9_fu_1147_p2;
wire   [7:0] Tm_10_fu_1158_p2;
wire   [7:0] Tm_11_fu_1170_p2;
wire   [7:0] xor_ln307_7_fu_1181_p2;
wire   [7:0] Tm_13_fu_1197_p2;
wire   [7:0] Tm_14_fu_1208_p2;
wire   [7:0] Tm_15_fu_1220_p2;
wire   [0:0] tmp_fu_1234_p3;
wire   [7:0] shl_ln296_fu_1042_p2;
wire   [7:0] Tmp_fu_1036_p2;
wire   [7:0] trunc_ln244_fu_1231_p1;
wire   [7:0] xor_ln244_1_fu_1254_p2;
wire   [7:0] select_ln244_fu_1241_p3;
wire   [7:0] xor_ln244_2_fu_1260_p2;
wire   [7:0] xor_ln244_fu_1249_p2;
wire   [0:0] tmp_1_fu_1275_p3;
wire   [7:0] shl_ln296_1_fu_1052_p2;
wire   [7:0] trunc_ln244_1_fu_1272_p1;
wire   [7:0] xor_ln244_5_fu_1296_p2;
wire   [7:0] select_ln244_1_fu_1283_p3;
wire   [7:0] xor_ln244_6_fu_1302_p2;
wire   [7:0] xor_ln244_4_fu_1291_p2;
wire   [0:0] tmp_2_fu_1317_p3;
wire   [7:0] shl_ln296_2_fu_1064_p2;
wire   [7:0] trunc_ln244_2_fu_1314_p1;
wire   [7:0] xor_ln244_9_fu_1339_p2;
wire   [7:0] select_ln244_2_fu_1325_p3;
wire   [7:0] xor_ln244_10_fu_1344_p2;
wire   [7:0] xor_ln244_8_fu_1333_p2;
wire   [0:0] tmp_3_fu_1359_p3;
wire   [7:0] shl_ln296_3_fu_1075_p2;
wire   [7:0] select_ln244_3_fu_1367_p3;
wire   [7:0] trunc_ln244_3_fu_1356_p1;
wire   [7:0] xor_ln244_13_fu_1381_p2;
wire   [7:0] xor_ln244_12_fu_1375_p2;
wire   [0:0] tmp_4_fu_1396_p3;
wire   [7:0] shl_ln296_4_fu_1092_p2;
wire   [7:0] Tmp_1_fu_1086_p2;
wire   [7:0] trunc_ln244_4_fu_1393_p1;
wire   [7:0] xor_ln244_16_fu_1416_p2;
wire   [7:0] select_ln244_4_fu_1403_p3;
wire   [7:0] xor_ln244_17_fu_1422_p2;
wire   [7:0] xor_ln244_15_fu_1411_p2;
wire   [0:0] tmp_5_fu_1437_p3;
wire   [7:0] shl_ln296_5_fu_1102_p2;
wire   [7:0] trunc_ln244_5_fu_1434_p1;
wire   [7:0] xor_ln244_20_fu_1458_p2;
wire   [7:0] select_ln244_5_fu_1445_p3;
wire   [7:0] xor_ln244_21_fu_1464_p2;
wire   [7:0] xor_ln244_19_fu_1453_p2;
wire   [0:0] tmp_6_fu_1479_p3;
wire   [7:0] shl_ln296_6_fu_1114_p2;
wire   [7:0] trunc_ln244_6_fu_1476_p1;
wire   [7:0] xor_ln244_24_fu_1501_p2;
wire   [7:0] select_ln244_6_fu_1487_p3;
wire   [7:0] xor_ln244_25_fu_1506_p2;
wire   [7:0] xor_ln244_23_fu_1495_p2;
wire   [0:0] tmp_7_fu_1521_p3;
wire   [7:0] shl_ln296_7_fu_1125_p2;
wire   [7:0] select_ln244_7_fu_1529_p3;
wire   [7:0] trunc_ln244_7_fu_1518_p1;
wire   [7:0] xor_ln244_28_fu_1543_p2;
wire   [7:0] xor_ln244_27_fu_1537_p2;
wire   [0:0] tmp_8_fu_1558_p3;
wire   [7:0] shl_ln296_8_fu_1142_p2;
wire   [7:0] Tmp_2_fu_1136_p2;
wire   [7:0] trunc_ln244_8_fu_1555_p1;
wire   [7:0] xor_ln244_31_fu_1578_p2;
wire   [7:0] select_ln244_8_fu_1565_p3;
wire   [7:0] xor_ln244_32_fu_1584_p2;
wire   [7:0] xor_ln244_30_fu_1573_p2;
wire   [0:0] tmp_9_fu_1599_p3;
wire   [7:0] shl_ln296_9_fu_1152_p2;
wire   [7:0] trunc_ln244_9_fu_1596_p1;
wire   [7:0] xor_ln244_35_fu_1620_p2;
wire   [7:0] select_ln244_9_fu_1607_p3;
wire   [7:0] xor_ln244_36_fu_1626_p2;
wire   [7:0] xor_ln244_34_fu_1615_p2;
wire   [0:0] tmp_10_fu_1641_p3;
wire   [7:0] shl_ln296_10_fu_1164_p2;
wire   [7:0] trunc_ln244_10_fu_1638_p1;
wire   [7:0] xor_ln244_39_fu_1663_p2;
wire   [7:0] select_ln244_10_fu_1649_p3;
wire   [7:0] xor_ln244_40_fu_1668_p2;
wire   [7:0] xor_ln244_38_fu_1657_p2;
wire   [0:0] tmp_11_fu_1683_p3;
wire   [7:0] shl_ln296_11_fu_1175_p2;
wire   [7:0] select_ln244_11_fu_1691_p3;
wire   [7:0] trunc_ln244_11_fu_1680_p1;
wire   [7:0] xor_ln244_43_fu_1705_p2;
wire   [7:0] xor_ln244_42_fu_1699_p2;
wire   [0:0] tmp_12_fu_1720_p3;
wire   [7:0] shl_ln296_12_fu_1192_p2;
wire   [7:0] Tmp_3_fu_1186_p2;
wire   [7:0] trunc_ln244_12_fu_1717_p1;
wire   [7:0] xor_ln244_46_fu_1740_p2;
wire   [7:0] select_ln244_12_fu_1727_p3;
wire   [7:0] xor_ln244_47_fu_1746_p2;
wire   [7:0] xor_ln244_45_fu_1735_p2;
wire   [0:0] tmp_13_fu_1761_p3;
wire   [7:0] shl_ln296_13_fu_1202_p2;
wire   [7:0] trunc_ln244_13_fu_1758_p1;
wire   [7:0] xor_ln244_50_fu_1782_p2;
wire   [7:0] select_ln244_13_fu_1769_p3;
wire   [7:0] xor_ln244_51_fu_1788_p2;
wire   [7:0] xor_ln244_49_fu_1777_p2;
wire   [0:0] tmp_14_fu_1803_p3;
wire   [7:0] shl_ln296_14_fu_1214_p2;
wire   [7:0] trunc_ln244_14_fu_1800_p1;
wire   [7:0] xor_ln244_54_fu_1825_p2;
wire   [7:0] select_ln244_14_fu_1811_p3;
wire   [7:0] xor_ln244_55_fu_1830_p2;
wire   [7:0] xor_ln244_53_fu_1819_p2;
wire   [0:0] tmp_15_fu_1845_p3;
wire   [7:0] shl_ln296_15_fu_1225_p2;
wire   [7:0] select_ln244_15_fu_1853_p3;
wire   [7:0] trunc_ln244_15_fu_1842_p1;
wire   [7:0] xor_ln244_58_fu_1867_p2;
wire   [7:0] xor_ln244_57_fu_1861_p2;
wire   [7:0] xor_ln244_3_fu_1266_p2;
wire   [7:0] xor_ln244_18_fu_1428_p2;
wire   [7:0] xor_ln244_33_fu_1590_p2;
wire   [7:0] xor_ln244_48_fu_1752_p2;
wire   [7:0] xor_ln244_7_fu_1308_p2;
wire   [7:0] xor_ln244_22_fu_1470_p2;
wire   [7:0] xor_ln244_37_fu_1632_p2;
wire   [7:0] xor_ln244_52_fu_1794_p2;
wire   [7:0] xor_ln244_11_fu_1350_p2;
wire   [7:0] xor_ln244_26_fu_1512_p2;
wire   [7:0] xor_ln244_41_fu_1674_p2;
wire   [7:0] xor_ln244_56_fu_1836_p2;
wire   [7:0] xor_ln244_14_fu_1387_p2;
wire   [7:0] xor_ln244_29_fu_1549_p2;
wire   [7:0] xor_ln244_44_fu_1711_p2;
wire   [7:0] xor_ln244_59_fu_1873_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 round_fu_134 = 4'd0;
#0 t_fu_138 = 8'd0;
#0 empty_fu_142 = 8'd0;
#0 empty_30_fu_146 = 8'd0;
#0 empty_31_fu_150 = 8'd0;
#0 t_1_fu_154 = 8'd0;
#0 empty_32_fu_158 = 8'd0;
#0 empty_33_fu_162 = 8'd0;
#0 empty_34_fu_166 = 8'd0;
#0 t_2_fu_170 = 8'd0;
#0 empty_35_fu_174 = 8'd0;
#0 empty_36_fu_178 = 8'd0;
#0 empty_37_fu_182 = 8'd0;
#0 t_3_fu_186 = 8'd0;
#0 empty_38_fu_190 = 8'd0;
#0 empty_39_fu_194 = 8'd0;
#0 empty_40_fu_198 = 8'd0;
#0 ap_done_reg = 1'b0;
end

AES_ECB_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_30_fu_146 <= buf_r_load_4;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_30_fu_146 <= sbox_q5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_31_fu_150 <= buf_r_load_8;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_31_fu_150 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_32_fu_158 <= buf_r_load_1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_32_fu_158 <= sbox_q9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_33_fu_162 <= buf_r_load_6;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_33_fu_162 <= sbox_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_34_fu_166 <= temp_3;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_34_fu_166 <= sbox_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_35_fu_174 <= buf_r_load_2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_35_fu_174 <= sbox_q8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_36_fu_178 <= temp_1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_36_fu_178 <= sbox_q7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_37_fu_182 <= buf_r_load_10;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_37_fu_182 <= sbox_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_38_fu_190 <= temp;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_38_fu_190 <= sbox_q11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_39_fu_194 <= temp_2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_39_fu_194 <= sbox_q6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_40_fu_198 <= buf_r_load_9;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_40_fu_198 <= sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_fu_142 <= buf_r_load;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_fu_142 <= sbox_q10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        round_fu_134 <= 4'd1;
    end else if (((icmp_ln428_reg_2265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        round_fu_134 <= add_ln424_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_1_fu_154 <= buf_r_load_12;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_1_fu_154 <= sbox_q14;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_2_fu_170 <= buf_r_load_13;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_2_fu_170 <= sbox_q13;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_3_fu_186 <= buf_r_load_14;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_3_fu_186 <= sbox_q12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_fu_138 <= buf_r_load_11;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_fu_138 <= sbox_q15;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Tm_12_reg_2411 <= Tm_12_fu_847_p2;
        Tm_4_reg_2395 <= Tm_4_fu_835_p2;
        Tm_8_reg_2403 <= Tm_8_fu_841_p2;
        Tm_reg_2387 <= Tm_fu_829_p2;
        lshr_ln244_10_reg_2469[1455 : 0] <= lshr_ln244_10_fu_944_p2[1455 : 0];
        lshr_ln244_11_reg_2474[1447 : 0] <= lshr_ln244_11_fu_952_p2[1447 : 0];
        lshr_ln244_12_reg_2479[1439 : 0] <= lshr_ln244_12_fu_960_p2[1439 : 0];
        lshr_ln244_13_reg_2484[1431 : 0] <= lshr_ln244_13_fu_968_p2[1431 : 0];
        lshr_ln244_14_reg_2489[1423 : 0] <= lshr_ln244_14_fu_976_p2[1423 : 0];
        lshr_ln244_15_reg_2494[1415 : 0] <= lshr_ln244_15_fu_992_p2[1415 : 0];
        lshr_ln244_1_reg_2424[1527 : 0] <= lshr_ln244_1_fu_872_p2[1527 : 0];
        lshr_ln244_2_reg_2429[1519 : 0] <= lshr_ln244_2_fu_880_p2[1519 : 0];
        lshr_ln244_3_reg_2434[1511 : 0] <= lshr_ln244_3_fu_888_p2[1511 : 0];
        lshr_ln244_4_reg_2439[1503 : 0] <= lshr_ln244_4_fu_896_p2[1503 : 0];
        lshr_ln244_5_reg_2444[1495 : 0] <= lshr_ln244_5_fu_904_p2[1495 : 0];
        lshr_ln244_6_reg_2449[1487 : 0] <= lshr_ln244_6_fu_912_p2[1487 : 0];
        lshr_ln244_7_reg_2454[1479 : 0] <= lshr_ln244_7_fu_920_p2[1479 : 0];
        lshr_ln244_8_reg_2459[1471 : 0] <= lshr_ln244_8_fu_928_p2[1471 : 0];
        lshr_ln244_9_reg_2464[1463 : 0] <= lshr_ln244_9_fu_936_p2[1463 : 0];
        lshr_ln244_reg_2419 <= lshr_ln244_fu_864_p2;
        p_load64_reg_2381 <= ap_sig_allocacmp_p_load64;
        p_load71_reg_2369 <= ap_sig_allocacmp_p_load71;
        p_load78_reg_2357 <= ap_sig_allocacmp_p_load78;
        p_load85_reg_2345 <= ap_sig_allocacmp_p_load85;
        t_1_load_reg_2351 <= ap_sig_allocacmp_t_1_load;
        t_2_load_reg_2363 <= ap_sig_allocacmp_t_2_load;
        t_3_load_reg_2375 <= ap_sig_allocacmp_t_3_load;
        t_load_reg_2339 <= ap_sig_allocacmp_t_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln244_10_reg_2334[11 : 7] <= add_ln244_10_fu_799_p2[11 : 7];
        add_ln244_1_reg_2284[11 : 7] <= add_ln244_1_fu_733_p2[11 : 7];
        add_ln244_2_reg_2289[11 : 7] <= add_ln244_2_fu_739_p2[11 : 7];
        add_ln244_3_reg_2294[11 : 7] <= add_ln244_3_fu_745_p2[11 : 7];
        add_ln244_4_reg_2304[11 : 7] <= add_ln244_4_fu_763_p2[11 : 7];
        add_ln244_5_reg_2309[11 : 7] <= add_ln244_5_fu_769_p2[11 : 7];
        add_ln244_6_reg_2314[11 : 7] <= add_ln244_6_fu_775_p2[11 : 7];
        add_ln244_7_reg_2319[11 : 7] <= add_ln244_7_fu_781_p2[11 : 7];
        add_ln244_8_reg_2324[11 : 7] <= add_ln244_8_fu_787_p2[11 : 7];
        add_ln244_9_reg_2329[11 : 7] <= add_ln244_9_fu_793_p2[11 : 7];
        add_ln244_reg_2274[11 : 7] <= add_ln244_fu_715_p2[11 : 7];
        icmp_ln428_reg_2265 <= icmp_ln428_fu_697_p2;
        or_ln244_1_reg_2279[10 : 7] <= or_ln244_1_fu_721_p3[10 : 7];
        or_ln244_2_reg_2299[10 : 7] <= or_ln244_2_fu_751_p3[10 : 7];
        or_ln_reg_2269[10 : 7] <= or_ln_fu_703_p3[10 : 7];
        round_1_reg_2258 <= ap_sig_allocacmp_round_1;
    end
end

always @ (*) begin
    if (((icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_p_load64 = sbox_q11;
    end else begin
        ap_sig_allocacmp_p_load64 = empty_38_fu_190;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_p_load71 = sbox_q8;
    end else begin
        ap_sig_allocacmp_p_load71 = empty_35_fu_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_p_load78 = sbox_q9;
    end else begin
        ap_sig_allocacmp_p_load78 = empty_32_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_p_load85 = sbox_q10;
    end else begin
        ap_sig_allocacmp_p_load85 = empty_fu_142;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_round_1 = 4'd1;
    end else begin
        ap_sig_allocacmp_round_1 = round_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_t_1_load = sbox_q14;
    end else begin
        ap_sig_allocacmp_t_1_load = t_1_fu_154;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_t_2_load = sbox_q13;
    end else begin
        ap_sig_allocacmp_t_2_load = t_2_fu_170;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_t_3_load = sbox_q12;
    end else begin
        ap_sig_allocacmp_t_3_load = t_3_fu_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_t_load = sbox_q15;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_138;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce0_local = 1'b1;
    end else begin
        sbox_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce10_local = 1'b1;
    end else begin
        sbox_ce10_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce11_local = 1'b1;
    end else begin
        sbox_ce11_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce12_local = 1'b1;
    end else begin
        sbox_ce12_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce13_local = 1'b1;
    end else begin
        sbox_ce13_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce14_local = 1'b1;
    end else begin
        sbox_ce14_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce15_local = 1'b1;
    end else begin
        sbox_ce15_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce1_local = 1'b1;
    end else begin
        sbox_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce2_local = 1'b1;
    end else begin
        sbox_ce2_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce3_local = 1'b1;
    end else begin
        sbox_ce3_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce4_local = 1'b1;
    end else begin
        sbox_ce4_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce5_local = 1'b1;
    end else begin
        sbox_ce5_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce6_local = 1'b1;
    end else begin
        sbox_ce6_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce7_local = 1'b1;
    end else begin
        sbox_ce7_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce8_local = 1'b1;
    end else begin
        sbox_ce8_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sbox_ce9_local = 1'b1;
    end else begin
        sbox_ce9_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_1_out_ap_vld = 1'b1;
    end else begin
        t_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_2_out_ap_vld = 1'b1;
    end else begin
        t_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_3_out_ap_vld = 1'b1;
    end else begin
        t_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln428_reg_2265 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_out_ap_vld = 1'b1;
    end else begin
        t_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_10_fu_1158_p2 = (empty_37_fu_182 ^ empty_36_fu_178);

assign Tm_11_fu_1170_p2 = (t_2_load_reg_2363 ^ empty_37_fu_182);

assign Tm_12_fu_847_p2 = (ap_sig_allocacmp_t_3_load ^ ap_sig_allocacmp_p_load64);

assign Tm_13_fu_1197_p2 = (p_load64_reg_2381 ^ empty_39_fu_194);

assign Tm_14_fu_1208_p2 = (empty_40_fu_198 ^ empty_39_fu_194);

assign Tm_15_fu_1220_p2 = (t_3_load_reg_2375 ^ empty_40_fu_198);

assign Tm_1_fu_1047_p2 = (p_load85_reg_2345 ^ empty_30_fu_146);

assign Tm_2_fu_1058_p2 = (empty_31_fu_150 ^ empty_30_fu_146);

assign Tm_3_fu_1070_p2 = (t_load_reg_2339 ^ empty_31_fu_150);

assign Tm_4_fu_835_p2 = (ap_sig_allocacmp_t_1_load ^ ap_sig_allocacmp_p_load78);

assign Tm_5_fu_1097_p2 = (p_load78_reg_2357 ^ empty_33_fu_162);

assign Tm_6_fu_1108_p2 = (empty_34_fu_166 ^ empty_33_fu_162);

assign Tm_7_fu_1120_p2 = (t_1_load_reg_2351 ^ empty_34_fu_166);

assign Tm_8_fu_841_p2 = (ap_sig_allocacmp_t_2_load ^ ap_sig_allocacmp_p_load71);

assign Tm_9_fu_1147_p2 = (p_load71_reg_2369 ^ empty_36_fu_178);

assign Tm_fu_829_p2 = (ap_sig_allocacmp_t_load ^ ap_sig_allocacmp_p_load85);

assign Tmp_1_fu_1086_p2 = (xor_ln307_3_fu_1081_p2 ^ empty_34_fu_166);

assign Tmp_2_fu_1136_p2 = (xor_ln307_5_fu_1131_p2 ^ empty_37_fu_182);

assign Tmp_3_fu_1186_p2 = (xor_ln307_7_fu_1181_p2 ^ empty_40_fu_198);

assign Tmp_fu_1036_p2 = (xor_ln307_1_fu_1031_p2 ^ empty_31_fu_150);

assign add_ln244_10_fu_799_p2 = (zext_ln244_18_fu_759_p1 + 12'd56);

assign add_ln244_1_fu_733_p2 = (zext_ln244_17_fu_729_p1 + 12'd8);

assign add_ln244_2_fu_739_p2 = (zext_ln244_17_fu_729_p1 + 12'd16);

assign add_ln244_3_fu_745_p2 = (zext_ln244_17_fu_729_p1 + 12'd24);

assign add_ln244_4_fu_763_p2 = (zext_ln244_18_fu_759_p1 + 12'd8);

assign add_ln244_5_fu_769_p2 = (zext_ln244_18_fu_759_p1 + 12'd16);

assign add_ln244_6_fu_775_p2 = (zext_ln244_18_fu_759_p1 + 12'd24);

assign add_ln244_7_fu_781_p2 = (zext_ln244_18_fu_759_p1 + 12'd32);

assign add_ln244_8_fu_787_p2 = (zext_ln244_18_fu_759_p1 + 12'd40);

assign add_ln244_9_fu_793_p2 = (zext_ln244_18_fu_759_p1 + 12'd48);

assign add_ln244_fu_715_p2 = (zext_ln244_1_fu_711_p1 + 12'd8);

assign add_ln424_fu_997_p2 = (round_1_reg_2258 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln428_fu_697_p2 = ((ap_sig_allocacmp_round_1 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln244_10_fu_944_p2 = RoundKey_val >> zext_ln244_11_fu_941_p1;

assign lshr_ln244_11_fu_952_p2 = RoundKey_val >> zext_ln244_12_fu_949_p1;

assign lshr_ln244_12_fu_960_p2 = RoundKey_val >> zext_ln244_13_fu_957_p1;

assign lshr_ln244_13_fu_968_p2 = RoundKey_val >> zext_ln244_14_fu_965_p1;

assign lshr_ln244_14_fu_976_p2 = RoundKey_val >> zext_ln244_15_fu_973_p1;

assign lshr_ln244_15_fu_992_p2 = RoundKey_val >> zext_ln244_16_fu_988_p1;

assign lshr_ln244_1_fu_872_p2 = RoundKey_val >> zext_ln244_2_fu_869_p1;

assign lshr_ln244_2_fu_880_p2 = RoundKey_val >> zext_ln244_3_fu_877_p1;

assign lshr_ln244_3_fu_888_p2 = RoundKey_val >> zext_ln244_4_fu_885_p1;

assign lshr_ln244_4_fu_896_p2 = RoundKey_val >> zext_ln244_5_fu_893_p1;

assign lshr_ln244_5_fu_904_p2 = RoundKey_val >> zext_ln244_6_fu_901_p1;

assign lshr_ln244_6_fu_912_p2 = RoundKey_val >> zext_ln244_7_fu_909_p1;

assign lshr_ln244_7_fu_920_p2 = RoundKey_val >> zext_ln244_8_fu_917_p1;

assign lshr_ln244_8_fu_928_p2 = RoundKey_val >> zext_ln244_9_fu_925_p1;

assign lshr_ln244_9_fu_936_p2 = RoundKey_val >> zext_ln244_10_fu_933_p1;

assign lshr_ln244_fu_864_p2 = RoundKey_val >> zext_ln244_fu_860_p1;

assign or_ln244_1_fu_721_p3 = {{ap_sig_allocacmp_round_1}, {7'd24}};

assign or_ln244_2_fu_751_p3 = {{ap_sig_allocacmp_round_1}, {7'd56}};

assign or_ln244_3_fu_981_p3 = {{round_1_reg_2258}, {7'd120}};

assign or_ln_fu_703_p3 = {{ap_sig_allocacmp_round_1}, {7'd8}};

assign p_out = empty_40_fu_198;

assign p_out1 = empty_39_fu_194;

assign p_out10 = empty_30_fu_146;

assign p_out11 = empty_fu_142;

assign p_out2 = empty_38_fu_190;

assign p_out3 = empty_37_fu_182;

assign p_out4 = empty_36_fu_178;

assign p_out5 = empty_35_fu_174;

assign p_out6 = empty_34_fu_166;

assign p_out7 = empty_33_fu_162;

assign p_out8 = empty_32_fu_158;

assign p_out9 = empty_31_fu_150;

assign sbox_address0 = zext_ln258_15_fu_1954_p1;

assign sbox_address1 = zext_ln258_14_fu_1949_p1;

assign sbox_address10 = zext_ln258_5_fu_1904_p1;

assign sbox_address11 = zext_ln258_4_fu_1899_p1;

assign sbox_address12 = zext_ln258_3_fu_1894_p1;

assign sbox_address13 = zext_ln258_2_fu_1889_p1;

assign sbox_address14 = zext_ln258_1_fu_1884_p1;

assign sbox_address15 = zext_ln258_fu_1879_p1;

assign sbox_address2 = zext_ln258_13_fu_1944_p1;

assign sbox_address3 = zext_ln258_12_fu_1939_p1;

assign sbox_address4 = zext_ln258_11_fu_1934_p1;

assign sbox_address5 = zext_ln258_10_fu_1929_p1;

assign sbox_address6 = zext_ln258_9_fu_1924_p1;

assign sbox_address7 = zext_ln258_8_fu_1919_p1;

assign sbox_address8 = zext_ln258_7_fu_1914_p1;

assign sbox_address9 = zext_ln258_6_fu_1909_p1;

assign sbox_ce0 = sbox_ce0_local;

assign sbox_ce1 = sbox_ce1_local;

assign sbox_ce10 = sbox_ce10_local;

assign sbox_ce11 = sbox_ce11_local;

assign sbox_ce12 = sbox_ce12_local;

assign sbox_ce13 = sbox_ce13_local;

assign sbox_ce14 = sbox_ce14_local;

assign sbox_ce15 = sbox_ce15_local;

assign sbox_ce2 = sbox_ce2_local;

assign sbox_ce3 = sbox_ce3_local;

assign sbox_ce4 = sbox_ce4_local;

assign sbox_ce5 = sbox_ce5_local;

assign sbox_ce6 = sbox_ce6_local;

assign sbox_ce7 = sbox_ce7_local;

assign sbox_ce8 = sbox_ce8_local;

assign sbox_ce9 = sbox_ce9_local;

assign select_ln244_10_fu_1649_p3 = ((tmp_10_fu_1641_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_11_fu_1691_p3 = ((tmp_11_fu_1683_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_12_fu_1727_p3 = ((tmp_12_fu_1720_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_13_fu_1769_p3 = ((tmp_13_fu_1761_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_14_fu_1811_p3 = ((tmp_14_fu_1803_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_15_fu_1853_p3 = ((tmp_15_fu_1845_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_1_fu_1283_p3 = ((tmp_1_fu_1275_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_2_fu_1325_p3 = ((tmp_2_fu_1317_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_3_fu_1367_p3 = ((tmp_3_fu_1359_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_4_fu_1403_p3 = ((tmp_4_fu_1396_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_5_fu_1445_p3 = ((tmp_5_fu_1437_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_6_fu_1487_p3 = ((tmp_6_fu_1479_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_7_fu_1529_p3 = ((tmp_7_fu_1521_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_8_fu_1565_p3 = ((tmp_8_fu_1558_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_9_fu_1607_p3 = ((tmp_9_fu_1599_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln244_fu_1241_p3 = ((tmp_fu_1234_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign shl_ln244_1_fu_853_p3 = {{round_1_reg_2258}, {7'd0}};

assign shl_ln296_10_fu_1164_p2 = Tm_10_fu_1158_p2 << 8'd1;

assign shl_ln296_11_fu_1175_p2 = Tm_11_fu_1170_p2 << 8'd1;

assign shl_ln296_12_fu_1192_p2 = Tm_12_reg_2411 << 8'd1;

assign shl_ln296_13_fu_1202_p2 = Tm_13_fu_1197_p2 << 8'd1;

assign shl_ln296_14_fu_1214_p2 = Tm_14_fu_1208_p2 << 8'd1;

assign shl_ln296_15_fu_1225_p2 = Tm_15_fu_1220_p2 << 8'd1;

assign shl_ln296_1_fu_1052_p2 = Tm_1_fu_1047_p2 << 8'd1;

assign shl_ln296_2_fu_1064_p2 = Tm_2_fu_1058_p2 << 8'd1;

assign shl_ln296_3_fu_1075_p2 = Tm_3_fu_1070_p2 << 8'd1;

assign shl_ln296_4_fu_1092_p2 = Tm_4_reg_2395 << 8'd1;

assign shl_ln296_5_fu_1102_p2 = Tm_5_fu_1097_p2 << 8'd1;

assign shl_ln296_6_fu_1114_p2 = Tm_6_fu_1108_p2 << 8'd1;

assign shl_ln296_7_fu_1125_p2 = Tm_7_fu_1120_p2 << 8'd1;

assign shl_ln296_8_fu_1142_p2 = Tm_8_reg_2403 << 8'd1;

assign shl_ln296_9_fu_1152_p2 = Tm_9_fu_1147_p2 << 8'd1;

assign shl_ln296_fu_1042_p2 = Tm_reg_2387 << 8'd1;

assign t_1_out = t_1_fu_154;

assign t_2_out = t_2_fu_170;

assign t_3_out = t_3_fu_186;

assign t_out = t_fu_138;

assign tmp_10_fu_1641_p3 = Tm_10_fu_1158_p2[32'd7];

assign tmp_11_fu_1683_p3 = Tm_11_fu_1170_p2[32'd7];

assign tmp_12_fu_1720_p3 = Tm_12_reg_2411[32'd7];

assign tmp_13_fu_1761_p3 = Tm_13_fu_1197_p2[32'd7];

assign tmp_14_fu_1803_p3 = Tm_14_fu_1208_p2[32'd7];

assign tmp_15_fu_1845_p3 = Tm_15_fu_1220_p2[32'd7];

assign tmp_1_fu_1275_p3 = Tm_1_fu_1047_p2[32'd7];

assign tmp_2_fu_1317_p3 = Tm_2_fu_1058_p2[32'd7];

assign tmp_3_fu_1359_p3 = Tm_3_fu_1070_p2[32'd7];

assign tmp_4_fu_1396_p3 = Tm_4_reg_2395[32'd7];

assign tmp_5_fu_1437_p3 = Tm_5_fu_1097_p2[32'd7];

assign tmp_6_fu_1479_p3 = Tm_6_fu_1108_p2[32'd7];

assign tmp_7_fu_1521_p3 = Tm_7_fu_1120_p2[32'd7];

assign tmp_8_fu_1558_p3 = Tm_8_reg_2403[32'd7];

assign tmp_9_fu_1599_p3 = Tm_9_fu_1147_p2[32'd7];

assign tmp_fu_1234_p3 = Tm_reg_2387[32'd7];

assign trunc_ln244_10_fu_1638_p1 = lshr_ln244_10_reg_2469[7:0];

assign trunc_ln244_11_fu_1680_p1 = lshr_ln244_11_reg_2474[7:0];

assign trunc_ln244_12_fu_1717_p1 = lshr_ln244_12_reg_2479[7:0];

assign trunc_ln244_13_fu_1758_p1 = lshr_ln244_13_reg_2484[7:0];

assign trunc_ln244_14_fu_1800_p1 = lshr_ln244_14_reg_2489[7:0];

assign trunc_ln244_15_fu_1842_p1 = lshr_ln244_15_reg_2494[7:0];

assign trunc_ln244_1_fu_1272_p1 = lshr_ln244_1_reg_2424[7:0];

assign trunc_ln244_2_fu_1314_p1 = lshr_ln244_2_reg_2429[7:0];

assign trunc_ln244_3_fu_1356_p1 = lshr_ln244_3_reg_2434[7:0];

assign trunc_ln244_4_fu_1393_p1 = lshr_ln244_4_reg_2439[7:0];

assign trunc_ln244_5_fu_1434_p1 = lshr_ln244_5_reg_2444[7:0];

assign trunc_ln244_6_fu_1476_p1 = lshr_ln244_6_reg_2449[7:0];

assign trunc_ln244_7_fu_1518_p1 = lshr_ln244_7_reg_2454[7:0];

assign trunc_ln244_8_fu_1555_p1 = lshr_ln244_8_reg_2459[7:0];

assign trunc_ln244_9_fu_1596_p1 = lshr_ln244_9_reg_2464[7:0];

assign trunc_ln244_fu_1231_p1 = lshr_ln244_reg_2419[7:0];

assign xor_ln244_10_fu_1344_p2 = (xor_ln244_9_fu_1339_p2 ^ select_ln244_2_fu_1325_p3);

assign xor_ln244_11_fu_1350_p2 = (xor_ln244_8_fu_1333_p2 ^ xor_ln244_10_fu_1344_p2);

assign xor_ln244_12_fu_1375_p2 = (xor_ln307_1_fu_1031_p2 ^ shl_ln296_3_fu_1075_p2);

assign xor_ln244_13_fu_1381_p2 = (trunc_ln244_3_fu_1356_p1 ^ select_ln244_3_fu_1367_p3);

assign xor_ln244_14_fu_1387_p2 = (xor_ln244_13_fu_1381_p2 ^ xor_ln244_12_fu_1375_p2);

assign xor_ln244_15_fu_1411_p2 = (t_1_load_reg_2351 ^ shl_ln296_4_fu_1092_p2);

assign xor_ln244_16_fu_1416_p2 = (trunc_ln244_4_fu_1393_p1 ^ Tmp_1_fu_1086_p2);

assign xor_ln244_17_fu_1422_p2 = (xor_ln244_16_fu_1416_p2 ^ select_ln244_4_fu_1403_p3);

assign xor_ln244_18_fu_1428_p2 = (xor_ln244_17_fu_1422_p2 ^ xor_ln244_15_fu_1411_p2);

assign xor_ln244_19_fu_1453_p2 = (shl_ln296_5_fu_1102_p2 ^ p_load78_reg_2357);

assign xor_ln244_1_fu_1254_p2 = (trunc_ln244_fu_1231_p1 ^ Tmp_fu_1036_p2);

assign xor_ln244_20_fu_1458_p2 = (trunc_ln244_5_fu_1434_p1 ^ Tmp_1_fu_1086_p2);

assign xor_ln244_21_fu_1464_p2 = (xor_ln244_20_fu_1458_p2 ^ select_ln244_5_fu_1445_p3);

assign xor_ln244_22_fu_1470_p2 = (xor_ln244_21_fu_1464_p2 ^ xor_ln244_19_fu_1453_p2);

assign xor_ln244_23_fu_1495_p2 = (shl_ln296_6_fu_1114_p2 ^ empty_34_fu_166);

assign xor_ln244_24_fu_1501_p2 = (trunc_ln244_6_fu_1476_p1 ^ Tm_4_reg_2395);

assign xor_ln244_25_fu_1506_p2 = (xor_ln244_24_fu_1501_p2 ^ select_ln244_6_fu_1487_p3);

assign xor_ln244_26_fu_1512_p2 = (xor_ln244_25_fu_1506_p2 ^ xor_ln244_23_fu_1495_p2);

assign xor_ln244_27_fu_1537_p2 = (xor_ln307_3_fu_1081_p2 ^ shl_ln296_7_fu_1125_p2);

assign xor_ln244_28_fu_1543_p2 = (trunc_ln244_7_fu_1518_p1 ^ select_ln244_7_fu_1529_p3);

assign xor_ln244_29_fu_1549_p2 = (xor_ln244_28_fu_1543_p2 ^ xor_ln244_27_fu_1537_p2);

assign xor_ln244_2_fu_1260_p2 = (xor_ln244_1_fu_1254_p2 ^ select_ln244_fu_1241_p3);

assign xor_ln244_30_fu_1573_p2 = (t_2_load_reg_2363 ^ shl_ln296_8_fu_1142_p2);

assign xor_ln244_31_fu_1578_p2 = (trunc_ln244_8_fu_1555_p1 ^ Tmp_2_fu_1136_p2);

assign xor_ln244_32_fu_1584_p2 = (xor_ln244_31_fu_1578_p2 ^ select_ln244_8_fu_1565_p3);

assign xor_ln244_33_fu_1590_p2 = (xor_ln244_32_fu_1584_p2 ^ xor_ln244_30_fu_1573_p2);

assign xor_ln244_34_fu_1615_p2 = (shl_ln296_9_fu_1152_p2 ^ p_load71_reg_2369);

assign xor_ln244_35_fu_1620_p2 = (trunc_ln244_9_fu_1596_p1 ^ Tmp_2_fu_1136_p2);

assign xor_ln244_36_fu_1626_p2 = (xor_ln244_35_fu_1620_p2 ^ select_ln244_9_fu_1607_p3);

assign xor_ln244_37_fu_1632_p2 = (xor_ln244_36_fu_1626_p2 ^ xor_ln244_34_fu_1615_p2);

assign xor_ln244_38_fu_1657_p2 = (shl_ln296_10_fu_1164_p2 ^ empty_37_fu_182);

assign xor_ln244_39_fu_1663_p2 = (trunc_ln244_10_fu_1638_p1 ^ Tm_8_reg_2403);

assign xor_ln244_3_fu_1266_p2 = (xor_ln244_fu_1249_p2 ^ xor_ln244_2_fu_1260_p2);

assign xor_ln244_40_fu_1668_p2 = (xor_ln244_39_fu_1663_p2 ^ select_ln244_10_fu_1649_p3);

assign xor_ln244_41_fu_1674_p2 = (xor_ln244_40_fu_1668_p2 ^ xor_ln244_38_fu_1657_p2);

assign xor_ln244_42_fu_1699_p2 = (xor_ln307_5_fu_1131_p2 ^ shl_ln296_11_fu_1175_p2);

assign xor_ln244_43_fu_1705_p2 = (trunc_ln244_11_fu_1680_p1 ^ select_ln244_11_fu_1691_p3);

assign xor_ln244_44_fu_1711_p2 = (xor_ln244_43_fu_1705_p2 ^ xor_ln244_42_fu_1699_p2);

assign xor_ln244_45_fu_1735_p2 = (t_3_load_reg_2375 ^ shl_ln296_12_fu_1192_p2);

assign xor_ln244_46_fu_1740_p2 = (trunc_ln244_12_fu_1717_p1 ^ Tmp_3_fu_1186_p2);

assign xor_ln244_47_fu_1746_p2 = (xor_ln244_46_fu_1740_p2 ^ select_ln244_12_fu_1727_p3);

assign xor_ln244_48_fu_1752_p2 = (xor_ln244_47_fu_1746_p2 ^ xor_ln244_45_fu_1735_p2);

assign xor_ln244_49_fu_1777_p2 = (shl_ln296_13_fu_1202_p2 ^ p_load64_reg_2381);

assign xor_ln244_4_fu_1291_p2 = (shl_ln296_1_fu_1052_p2 ^ p_load85_reg_2345);

assign xor_ln244_50_fu_1782_p2 = (trunc_ln244_13_fu_1758_p1 ^ Tmp_3_fu_1186_p2);

assign xor_ln244_51_fu_1788_p2 = (xor_ln244_50_fu_1782_p2 ^ select_ln244_13_fu_1769_p3);

assign xor_ln244_52_fu_1794_p2 = (xor_ln244_51_fu_1788_p2 ^ xor_ln244_49_fu_1777_p2);

assign xor_ln244_53_fu_1819_p2 = (shl_ln296_14_fu_1214_p2 ^ empty_40_fu_198);

assign xor_ln244_54_fu_1825_p2 = (trunc_ln244_14_fu_1800_p1 ^ Tm_12_reg_2411);

assign xor_ln244_55_fu_1830_p2 = (xor_ln244_54_fu_1825_p2 ^ select_ln244_14_fu_1811_p3);

assign xor_ln244_56_fu_1836_p2 = (xor_ln244_55_fu_1830_p2 ^ xor_ln244_53_fu_1819_p2);

assign xor_ln244_57_fu_1861_p2 = (xor_ln307_7_fu_1181_p2 ^ shl_ln296_15_fu_1225_p2);

assign xor_ln244_58_fu_1867_p2 = (trunc_ln244_15_fu_1842_p1 ^ select_ln244_15_fu_1853_p3);

assign xor_ln244_59_fu_1873_p2 = (xor_ln244_58_fu_1867_p2 ^ xor_ln244_57_fu_1861_p2);

assign xor_ln244_5_fu_1296_p2 = (trunc_ln244_1_fu_1272_p1 ^ Tmp_fu_1036_p2);

assign xor_ln244_6_fu_1302_p2 = (xor_ln244_5_fu_1296_p2 ^ select_ln244_1_fu_1283_p3);

assign xor_ln244_7_fu_1308_p2 = (xor_ln244_6_fu_1302_p2 ^ xor_ln244_4_fu_1291_p2);

assign xor_ln244_8_fu_1333_p2 = (shl_ln296_2_fu_1064_p2 ^ empty_31_fu_150);

assign xor_ln244_9_fu_1339_p2 = (trunc_ln244_2_fu_1314_p1 ^ Tm_reg_2387);

assign xor_ln244_fu_1249_p2 = (t_load_reg_2339 ^ shl_ln296_fu_1042_p2);

assign xor_ln307_1_fu_1031_p2 = (empty_30_fu_146 ^ Tm_reg_2387);

assign xor_ln307_3_fu_1081_p2 = (empty_33_fu_162 ^ Tm_4_reg_2395);

assign xor_ln307_5_fu_1131_p2 = (empty_36_fu_178 ^ Tm_8_reg_2403);

assign xor_ln307_7_fu_1181_p2 = (empty_39_fu_194 ^ Tm_12_reg_2411);

assign zext_ln244_10_fu_933_p1 = add_ln244_5_reg_2309;

assign zext_ln244_11_fu_941_p1 = add_ln244_6_reg_2314;

assign zext_ln244_12_fu_949_p1 = add_ln244_7_reg_2319;

assign zext_ln244_13_fu_957_p1 = add_ln244_8_reg_2324;

assign zext_ln244_14_fu_965_p1 = add_ln244_9_reg_2329;

assign zext_ln244_15_fu_973_p1 = add_ln244_10_reg_2334;

assign zext_ln244_16_fu_988_p1 = or_ln244_3_fu_981_p3;

assign zext_ln244_17_fu_729_p1 = or_ln244_1_fu_721_p3;

assign zext_ln244_18_fu_759_p1 = or_ln244_2_fu_751_p3;

assign zext_ln244_1_fu_711_p1 = or_ln_fu_703_p3;

assign zext_ln244_2_fu_869_p1 = or_ln_reg_2269;

assign zext_ln244_3_fu_877_p1 = add_ln244_reg_2274;

assign zext_ln244_4_fu_885_p1 = or_ln244_1_reg_2279;

assign zext_ln244_5_fu_893_p1 = add_ln244_1_reg_2284;

assign zext_ln244_6_fu_901_p1 = add_ln244_2_reg_2289;

assign zext_ln244_7_fu_909_p1 = add_ln244_3_reg_2294;

assign zext_ln244_8_fu_917_p1 = or_ln244_2_reg_2299;

assign zext_ln244_9_fu_925_p1 = add_ln244_4_reg_2304;

assign zext_ln244_fu_860_p1 = shl_ln244_1_fu_853_p3;

assign zext_ln258_10_fu_1929_p1 = xor_ln244_41_fu_1674_p2;

assign zext_ln258_11_fu_1934_p1 = xor_ln244_56_fu_1836_p2;

assign zext_ln258_12_fu_1939_p1 = xor_ln244_14_fu_1387_p2;

assign zext_ln258_13_fu_1944_p1 = xor_ln244_29_fu_1549_p2;

assign zext_ln258_14_fu_1949_p1 = xor_ln244_44_fu_1711_p2;

assign zext_ln258_15_fu_1954_p1 = xor_ln244_59_fu_1873_p2;

assign zext_ln258_1_fu_1884_p1 = xor_ln244_18_fu_1428_p2;

assign zext_ln258_2_fu_1889_p1 = xor_ln244_33_fu_1590_p2;

assign zext_ln258_3_fu_1894_p1 = xor_ln244_48_fu_1752_p2;

assign zext_ln258_4_fu_1899_p1 = xor_ln244_7_fu_1308_p2;

assign zext_ln258_5_fu_1904_p1 = xor_ln244_22_fu_1470_p2;

assign zext_ln258_6_fu_1909_p1 = xor_ln244_37_fu_1632_p2;

assign zext_ln258_7_fu_1914_p1 = xor_ln244_52_fu_1794_p2;

assign zext_ln258_8_fu_1919_p1 = xor_ln244_11_fu_1350_p2;

assign zext_ln258_9_fu_1924_p1 = xor_ln244_26_fu_1512_p2;

assign zext_ln258_fu_1879_p1 = xor_ln244_3_fu_1266_p2;

always @ (posedge ap_clk) begin
    or_ln_reg_2269[6:0] <= 7'b0001000;
    add_ln244_reg_2274[6:0] <= 7'b0010000;
    or_ln244_1_reg_2279[6:0] <= 7'b0011000;
    add_ln244_1_reg_2284[6:0] <= 7'b0100000;
    add_ln244_2_reg_2289[6:0] <= 7'b0101000;
    add_ln244_3_reg_2294[6:0] <= 7'b0110000;
    or_ln244_2_reg_2299[6:0] <= 7'b0111000;
    add_ln244_4_reg_2304[6:0] <= 7'b1000000;
    add_ln244_5_reg_2309[6:0] <= 7'b1001000;
    add_ln244_6_reg_2314[6:0] <= 7'b1010000;
    add_ln244_7_reg_2319[6:0] <= 7'b1011000;
    add_ln244_8_reg_2324[6:0] <= 7'b1100000;
    add_ln244_9_reg_2329[6:0] <= 7'b1101000;
    add_ln244_10_reg_2334[6:0] <= 7'b1110000;
    lshr_ln244_1_reg_2424[1535:1528] <= 8'b00000000;
    lshr_ln244_2_reg_2429[1535:1520] <= 16'b0000000000000000;
    lshr_ln244_3_reg_2434[1535:1512] <= 24'b000000000000000000000000;
    lshr_ln244_4_reg_2439[1535:1504] <= 32'b00000000000000000000000000000000;
    lshr_ln244_5_reg_2444[1535:1496] <= 40'b0000000000000000000000000000000000000000;
    lshr_ln244_6_reg_2449[1535:1488] <= 48'b000000000000000000000000000000000000000000000000;
    lshr_ln244_7_reg_2454[1535:1480] <= 56'b00000000000000000000000000000000000000000000000000000000;
    lshr_ln244_8_reg_2459[1535:1472] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_9_reg_2464[1535:1464] <= 72'b000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_10_reg_2469[1535:1456] <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_11_reg_2474[1535:1448] <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_12_reg_2479[1535:1440] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_13_reg_2484[1535:1432] <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_14_reg_2489[1535:1424] <= 112'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    lshr_ln244_15_reg_2494[1535:1416] <= 120'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_424_1
