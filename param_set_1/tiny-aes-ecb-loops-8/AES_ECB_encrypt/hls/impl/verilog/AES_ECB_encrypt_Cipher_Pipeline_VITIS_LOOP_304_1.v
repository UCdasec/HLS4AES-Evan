// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_304_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln304_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln304_fu_117_p1;
reg   [1:0] trunc_ln304_reg_372;
reg   [3:0] buf_r_addr_reg_378;
reg   [3:0] buf_r_addr_1_reg_383;
reg   [3:0] buf_r_addr_2_reg_388;
wire    ap_CS_fsm_state2;
reg   [3:0] buf_r_addr_3_reg_393;
reg   [7:0] t_reg_398;
reg   [7:0] buf_r_load_reg_405;
wire   [7:0] xor_ln308_2_fu_225_p2;
reg   [7:0] xor_ln308_2_reg_412;
wire    ap_CS_fsm_state3;
wire   [7:0] xor_ln309_2_fu_269_p2;
reg   [7:0] xor_ln309_2_reg_417;
wire   [63:0] zext_ln306_fu_129_p1;
wire   [63:0] zext_ln307_fu_142_p1;
wire   [63:0] zext_ln307_1_fu_159_p1;
wire   [63:0] zext_ln307_2_fu_171_p1;
reg   [2:0] i_fu_52;
wire   [2:0] add_ln304_fu_111_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
reg    buf_r_ce1_local;
reg   [3:0] buf_r_address1_local;
reg    buf_r_ce0_local;
reg   [3:0] buf_r_address0_local;
reg    buf_r_we1_local;
reg   [7:0] buf_r_d1_local;
wire   [7:0] xor_ln310_2_fu_315_p2;
reg    buf_r_we0_local;
reg   [7:0] buf_r_d0_local;
wire   [7:0] xor_ln311_1_fu_355_p2;
wire   [3:0] tmp_4_fu_121_p3;
wire   [3:0] tmp_5_fu_134_p3;
wire   [3:0] tmp_6_fu_152_p3;
wire   [3:0] tmp_7_fu_164_p3;
wire   [7:0] Tm_fu_176_p2;
wire   [7:0] xor_ln307_1_fu_180_p2;
wire   [0:0] tmp_fu_198_p3;
wire   [7:0] shl_ln296_fu_192_p2;
wire   [7:0] select_ln308_fu_206_p3;
wire   [7:0] Tmp_fu_186_p2;
wire   [7:0] xor_ln308_1_fu_219_p2;
wire   [7:0] xor_ln308_fu_214_p2;
wire   [7:0] Tm_1_fu_231_p2;
wire   [0:0] tmp_1_fu_242_p3;
wire   [7:0] shl_ln296_1_fu_236_p2;
wire   [7:0] select_ln309_fu_250_p3;
wire   [7:0] xor_ln309_1_fu_263_p2;
wire   [7:0] xor_ln309_fu_258_p2;
wire   [7:0] Tm_2_fu_275_p2;
wire   [0:0] tmp_2_fu_287_p3;
wire   [7:0] shl_ln296_2_fu_281_p2;
wire   [7:0] select_ln310_fu_295_p3;
wire   [7:0] xor_ln310_1_fu_309_p2;
wire   [7:0] xor_ln310_fu_303_p2;
wire   [7:0] Tm_3_fu_322_p2;
wire   [0:0] tmp_3_fu_333_p3;
wire   [7:0] select_ln311_fu_341_p3;
wire   [7:0] xor_ln311_fu_349_p2;
wire   [7:0] shl_ln296_3_fu_327_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 i_fu_52 = 3'd0;
#0 ap_done_reg = 1'b0;
end

AES_ECB_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln304_fu_105_p2 == 1'd0)) begin
            i_fu_52 <= add_ln304_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_r_addr_1_reg_383[3 : 2] <= zext_ln307_fu_142_p1[3 : 2];
        buf_r_addr_reg_378[3 : 2] <= zext_ln306_fu_129_p1[3 : 2];
        trunc_ln304_reg_372 <= trunc_ln304_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_addr_2_reg_388[3 : 2] <= zext_ln307_1_fu_159_p1[3 : 2];
        buf_r_addr_3_reg_393[3 : 2] <= zext_ln307_2_fu_171_p1[3 : 2];
        buf_r_load_reg_405 <= buf_r_q0;
        t_reg_398 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln308_2_reg_412 <= xor_ln308_2_fu_225_p2;
        xor_ln309_2_reg_417 <= xor_ln309_2_fu_269_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln304_fu_105_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_52;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_address0_local = buf_r_addr_1_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0_local = buf_r_addr_3_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0_local = zext_ln307_2_fu_171_p1;
    end else if (((icmp_ln304_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_r_address0_local = zext_ln307_fu_142_p1;
    end else begin
        buf_r_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_address1_local = buf_r_addr_reg_378;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address1_local = buf_r_addr_2_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address1_local = zext_ln307_1_fu_159_p1;
    end else if (((icmp_ln304_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_r_address1_local = zext_ln306_fu_129_p1;
    end else begin
        buf_r_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln304_fu_105_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_r_ce0_local = 1'b1;
    end else begin
        buf_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln304_fu_105_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_r_ce1_local = 1'b1;
    end else begin
        buf_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_d0_local = xor_ln309_2_reg_417;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_d0_local = xor_ln311_1_fu_355_p2;
    end else begin
        buf_r_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_r_d1_local = xor_ln308_2_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_d1_local = xor_ln310_2_fu_315_p2;
    end else begin
        buf_r_d1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        buf_r_we0_local = 1'b1;
    end else begin
        buf_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        buf_r_we1_local = 1'b1;
    end else begin
        buf_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln304_fu_105_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_1_fu_231_p2 = (buf_r_q1 ^ buf_r_load_reg_405);

assign Tm_2_fu_275_p2 = (buf_r_q1 ^ buf_r_q0);

assign Tm_3_fu_322_p2 = (t_reg_398 ^ buf_r_q0);

assign Tm_fu_176_p2 = (t_reg_398 ^ buf_r_load_reg_405);

assign Tmp_fu_186_p2 = (xor_ln307_1_fu_180_p2 ^ buf_r_q0);

assign add_ln304_fu_111_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buf_r_address0 = buf_r_address0_local;

assign buf_r_address1 = buf_r_address1_local;

assign buf_r_ce0 = buf_r_ce0_local;

assign buf_r_ce1 = buf_r_ce1_local;

assign buf_r_d0 = buf_r_d0_local;

assign buf_r_d1 = buf_r_d1_local;

assign buf_r_we0 = buf_r_we0_local;

assign buf_r_we1 = buf_r_we1_local;

assign icmp_ln304_fu_105_p2 = ((ap_sig_allocacmp_i_1 == 3'd4) ? 1'b1 : 1'b0);

assign select_ln308_fu_206_p3 = ((tmp_fu_198_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln309_fu_250_p3 = ((tmp_1_fu_242_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln310_fu_295_p3 = ((tmp_2_fu_287_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln311_fu_341_p3 = ((tmp_3_fu_333_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign shl_ln296_1_fu_236_p2 = Tm_1_fu_231_p2 << 8'd1;

assign shl_ln296_2_fu_281_p2 = Tm_2_fu_275_p2 << 8'd1;

assign shl_ln296_3_fu_327_p2 = Tm_3_fu_322_p2 << 8'd1;

assign shl_ln296_fu_192_p2 = Tm_fu_176_p2 << 8'd1;

assign tmp_1_fu_242_p3 = Tm_1_fu_231_p2[32'd7];

assign tmp_2_fu_287_p3 = Tm_2_fu_275_p2[32'd7];

assign tmp_3_fu_333_p3 = Tm_3_fu_322_p2[32'd7];

assign tmp_4_fu_121_p3 = {{trunc_ln304_fu_117_p1}, {2'd0}};

assign tmp_5_fu_134_p3 = {{trunc_ln304_fu_117_p1}, {2'd1}};

assign tmp_6_fu_152_p3 = {{trunc_ln304_reg_372}, {2'd2}};

assign tmp_7_fu_164_p3 = {{trunc_ln304_reg_372}, {2'd3}};

assign tmp_fu_198_p3 = Tm_fu_176_p2[32'd7];

assign trunc_ln304_fu_117_p1 = ap_sig_allocacmp_i_1[1:0];

assign xor_ln307_1_fu_180_p2 = (buf_r_q1 ^ Tm_fu_176_p2);

assign xor_ln308_1_fu_219_p2 = (select_ln308_fu_206_p3 ^ Tmp_fu_186_p2);

assign xor_ln308_2_fu_225_p2 = (xor_ln308_fu_214_p2 ^ xor_ln308_1_fu_219_p2);

assign xor_ln308_fu_214_p2 = (t_reg_398 ^ shl_ln296_fu_192_p2);

assign xor_ln309_1_fu_263_p2 = (select_ln309_fu_250_p3 ^ Tmp_fu_186_p2);

assign xor_ln309_2_fu_269_p2 = (xor_ln309_fu_258_p2 ^ xor_ln309_1_fu_263_p2);

assign xor_ln309_fu_258_p2 = (shl_ln296_1_fu_236_p2 ^ buf_r_load_reg_405);

assign xor_ln310_1_fu_309_p2 = (shl_ln296_2_fu_281_p2 ^ select_ln310_fu_295_p3);

assign xor_ln310_2_fu_315_p2 = (xor_ln310_fu_303_p2 ^ xor_ln310_1_fu_309_p2);

assign xor_ln310_fu_303_p2 = (buf_r_q0 ^ Tm_fu_176_p2);

assign xor_ln311_1_fu_355_p2 = (xor_ln311_fu_349_p2 ^ shl_ln296_3_fu_327_p2);

assign xor_ln311_fu_349_p2 = (xor_ln307_1_fu_180_p2 ^ select_ln311_fu_341_p3);

assign zext_ln306_fu_129_p1 = tmp_4_fu_121_p3;

assign zext_ln307_1_fu_159_p1 = tmp_6_fu_152_p3;

assign zext_ln307_2_fu_171_p1 = tmp_7_fu_164_p3;

assign zext_ln307_fu_142_p1 = tmp_5_fu_134_p3;

always @ (posedge ap_clk) begin
    buf_r_addr_reg_378[1:0] <= 2'b00;
    buf_r_addr_1_reg_383[1:0] <= 2'b01;
    buf_r_addr_2_reg_388[1:0] <= 2'b10;
    buf_r_addr_3_reg_393[1:0] <= 2'b11;
end

endmodule //AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_304_1
