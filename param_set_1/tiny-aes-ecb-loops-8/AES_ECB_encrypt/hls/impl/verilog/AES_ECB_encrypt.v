// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_ECB_encrypt_AES_ECB_encrypt,hls_ip_2024_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.822000,HLS_SYN_LAT=762,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=353,HLS_SYN_LUT=8221,HLS_VERSION=2024_1}" *)

module AES_ECB_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1535:0] ctx;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Cipher_fu_34_ap_start;
wire    grp_Cipher_fu_34_ap_done;
wire    grp_Cipher_fu_34_ap_idle;
wire    grp_Cipher_fu_34_ap_ready;
wire   [3:0] grp_Cipher_fu_34_buf_r_address0;
wire    grp_Cipher_fu_34_buf_r_ce0;
wire    grp_Cipher_fu_34_buf_r_we0;
wire   [7:0] grp_Cipher_fu_34_buf_r_d0;
wire   [3:0] grp_Cipher_fu_34_buf_r_address1;
wire    grp_Cipher_fu_34_buf_r_ce1;
wire    grp_Cipher_fu_34_buf_r_we1;
wire   [7:0] grp_Cipher_fu_34_buf_r_d1;
reg    grp_Cipher_fu_34_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_Cipher_fu_34_ap_start_reg = 1'b0;
end

AES_ECB_encrypt_Cipher grp_Cipher_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Cipher_fu_34_ap_start),
    .ap_done(grp_Cipher_fu_34_ap_done),
    .ap_idle(grp_Cipher_fu_34_ap_idle),
    .ap_ready(grp_Cipher_fu_34_ap_ready),
    .buf_r_address0(grp_Cipher_fu_34_buf_r_address0),
    .buf_r_ce0(grp_Cipher_fu_34_buf_r_ce0),
    .buf_r_we0(grp_Cipher_fu_34_buf_r_we0),
    .buf_r_d0(grp_Cipher_fu_34_buf_r_d0),
    .buf_r_q0(buf_r_q0),
    .buf_r_address1(grp_Cipher_fu_34_buf_r_address1),
    .buf_r_ce1(grp_Cipher_fu_34_buf_r_ce1),
    .buf_r_we1(grp_Cipher_fu_34_buf_r_we1),
    .buf_r_d1(grp_Cipher_fu_34_buf_r_d1),
    .buf_r_q1(buf_r_q1),
    .RoundKey_val(ctx)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Cipher_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Cipher_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_34_ap_ready == 1'b1)) begin
            grp_Cipher_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Cipher_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Cipher_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign buf_r_address0 = grp_Cipher_fu_34_buf_r_address0;

assign buf_r_address1 = grp_Cipher_fu_34_buf_r_address1;

assign buf_r_ce0 = grp_Cipher_fu_34_buf_r_ce0;

assign buf_r_ce1 = grp_Cipher_fu_34_buf_r_ce1;

assign buf_r_d0 = grp_Cipher_fu_34_buf_r_d0;

assign buf_r_d1 = grp_Cipher_fu_34_buf_r_d1;

assign buf_r_we0 = grp_Cipher_fu_34_buf_r_we0;

assign buf_r_we1 = grp_Cipher_fu_34_buf_r_we1;

assign grp_Cipher_fu_34_ap_start = grp_Cipher_fu_34_ap_start_reg;

endmodule //AES_ECB_encrypt
