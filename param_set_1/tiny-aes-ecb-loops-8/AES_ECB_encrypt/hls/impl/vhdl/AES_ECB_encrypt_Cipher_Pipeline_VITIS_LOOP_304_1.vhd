-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_304_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_304_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln304_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln304_fu_117_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln304_reg_372 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_addr_reg_378 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_1_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_2_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buf_r_addr_3_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_reg_398 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_load_reg_405 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln308_2_fu_225_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln308_2_reg_412 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln309_2_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln309_2_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln306_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln307_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln307_1_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln307_2_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln304_fu_111_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_r_ce1_local : STD_LOGIC;
    signal buf_r_address1_local : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_ce0_local : STD_LOGIC;
    signal buf_r_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_we1_local : STD_LOGIC;
    signal buf_r_d1_local : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln310_2_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_we0_local : STD_LOGIC;
    signal buf_r_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln311_1_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_121_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_134_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_152_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_164_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal Tm_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln307_1_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln296_fu_192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln308_fu_206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tmp_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln308_1_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln308_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_1_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln296_1_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln309_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln309_1_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln309_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_2_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln296_2_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln310_fu_295_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln310_1_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln310_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_3_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln311_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln296_3_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AES_ECB_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component AES_ECB_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln304_fu_105_p2 = ap_const_lv1_0)) then 
                    i_fu_52 <= add_ln304_fu_111_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    buf_r_addr_1_reg_383(3 downto 2) <= zext_ln307_fu_142_p1(4 - 1 downto 0)(3 downto 2);
                    buf_r_addr_reg_378(3 downto 2) <= zext_ln306_fu_129_p1(4 - 1 downto 0)(3 downto 2);
                trunc_ln304_reg_372 <= trunc_ln304_fu_117_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    buf_r_addr_2_reg_388(3 downto 2) <= zext_ln307_1_fu_159_p1(4 - 1 downto 0)(3 downto 2);
                    buf_r_addr_3_reg_393(3 downto 2) <= zext_ln307_2_fu_171_p1(4 - 1 downto 0)(3 downto 2);
                buf_r_load_reg_405 <= buf_r_q0;
                t_reg_398 <= buf_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xor_ln308_2_reg_412 <= xor_ln308_2_fu_225_p2;
                xor_ln309_2_reg_417 <= xor_ln309_2_fu_269_p2;
            end if;
        end if;
    end process;
    buf_r_addr_reg_378(1 downto 0) <= "00";
    buf_r_addr_1_reg_383(1 downto 0) <= "01";
    buf_r_addr_2_reg_388(1 downto 0) <= "10";
    buf_r_addr_3_reg_393(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln304_fu_105_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln304_fu_105_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Tm_1_fu_231_p2 <= (buf_r_q1 xor buf_r_load_reg_405);
    Tm_2_fu_275_p2 <= (buf_r_q1 xor buf_r_q0);
    Tm_3_fu_322_p2 <= (t_reg_398 xor buf_r_q0);
    Tm_fu_176_p2 <= (t_reg_398 xor buf_r_load_reg_405);
    Tmp_fu_186_p2 <= (xor_ln307_1_fu_180_p2 xor buf_r_q0);
    add_ln304_fu_111_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln304_fu_105_p2)
    begin
        if (((icmp_ln304_fu_105_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_52;
        end if; 
    end process;

    buf_r_address0 <= buf_r_address0_local;

    buf_r_address0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln304_fu_105_p2, ap_CS_fsm_state4, buf_r_addr_1_reg_383, ap_CS_fsm_state2, buf_r_addr_3_reg_393, ap_CS_fsm_state3, zext_ln307_fu_142_p1, zext_ln307_2_fu_171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_r_address0_local <= buf_r_addr_1_reg_383;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_address0_local <= buf_r_addr_3_reg_393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_r_address0_local <= zext_ln307_2_fu_171_p1(4 - 1 downto 0);
        elsif (((icmp_ln304_fu_105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_r_address0_local <= zext_ln307_fu_142_p1(4 - 1 downto 0);
        else 
            buf_r_address0_local <= "XXXX";
        end if; 
    end process;

    buf_r_address1 <= buf_r_address1_local;

    buf_r_address1_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln304_fu_105_p2, ap_CS_fsm_state4, buf_r_addr_reg_378, buf_r_addr_2_reg_388, ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln306_fu_129_p1, zext_ln307_1_fu_159_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_r_address1_local <= buf_r_addr_reg_378;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_address1_local <= buf_r_addr_2_reg_388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_r_address1_local <= zext_ln307_1_fu_159_p1(4 - 1 downto 0);
        elsif (((icmp_ln304_fu_105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_r_address1_local <= zext_ln306_fu_129_p1(4 - 1 downto 0);
        else 
            buf_r_address1_local <= "XXXX";
        end if; 
    end process;

    buf_r_ce0 <= buf_r_ce0_local;

    buf_r_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln304_fu_105_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln304_fu_105_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_r_ce0_local <= ap_const_logic_1;
        else 
            buf_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_ce1 <= buf_r_ce1_local;

    buf_r_ce1_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln304_fu_105_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln304_fu_105_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_r_ce1_local <= ap_const_logic_1;
        else 
            buf_r_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= buf_r_d0_local;

    buf_r_d0_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, xor_ln309_2_reg_417, xor_ln311_1_fu_355_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_r_d0_local <= xor_ln309_2_reg_417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_d0_local <= xor_ln311_1_fu_355_p2;
        else 
            buf_r_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    buf_r_d1 <= buf_r_d1_local;

    buf_r_d1_local_assign_proc : process(ap_CS_fsm_state4, xor_ln308_2_reg_412, ap_CS_fsm_state3, xor_ln310_2_fu_315_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_r_d1_local <= xor_ln308_2_reg_412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_d1_local <= xor_ln310_2_fu_315_p2;
        else 
            buf_r_d1_local <= "XXXXXXXX";
        end if; 
    end process;

    buf_r_we0 <= buf_r_we0_local;

    buf_r_we0_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buf_r_we0_local <= ap_const_logic_1;
        else 
            buf_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_we1 <= buf_r_we1_local;

    buf_r_we1_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buf_r_we1_local <= ap_const_logic_1;
        else 
            buf_r_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln304_fu_105_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_4) else "0";
    select_ln308_fu_206_p3 <= 
        ap_const_lv8_1B when (tmp_fu_198_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln309_fu_250_p3 <= 
        ap_const_lv8_1B when (tmp_1_fu_242_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln310_fu_295_p3 <= 
        ap_const_lv8_1B when (tmp_2_fu_287_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln311_fu_341_p3 <= 
        ap_const_lv8_1B when (tmp_3_fu_333_p3(0) = '1') else 
        ap_const_lv8_0;
    shl_ln296_1_fu_236_p2 <= std_logic_vector(shift_left(unsigned(Tm_1_fu_231_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln296_2_fu_281_p2 <= std_logic_vector(shift_left(unsigned(Tm_2_fu_275_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln296_3_fu_327_p2 <= std_logic_vector(shift_left(unsigned(Tm_3_fu_322_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln296_fu_192_p2 <= std_logic_vector(shift_left(unsigned(Tm_fu_176_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_1_fu_242_p3 <= Tm_1_fu_231_p2(7 downto 7);
    tmp_2_fu_287_p3 <= Tm_2_fu_275_p2(7 downto 7);
    tmp_3_fu_333_p3 <= Tm_3_fu_322_p2(7 downto 7);
    tmp_4_fu_121_p3 <= (trunc_ln304_fu_117_p1 & ap_const_lv2_0);
    tmp_5_fu_134_p3 <= (trunc_ln304_fu_117_p1 & ap_const_lv2_1);
    tmp_6_fu_152_p3 <= (trunc_ln304_reg_372 & ap_const_lv2_2);
    tmp_7_fu_164_p3 <= (trunc_ln304_reg_372 & ap_const_lv2_3);
    tmp_fu_198_p3 <= Tm_fu_176_p2(7 downto 7);
    trunc_ln304_fu_117_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    xor_ln307_1_fu_180_p2 <= (buf_r_q1 xor Tm_fu_176_p2);
    xor_ln308_1_fu_219_p2 <= (select_ln308_fu_206_p3 xor Tmp_fu_186_p2);
    xor_ln308_2_fu_225_p2 <= (xor_ln308_fu_214_p2 xor xor_ln308_1_fu_219_p2);
    xor_ln308_fu_214_p2 <= (t_reg_398 xor shl_ln296_fu_192_p2);
    xor_ln309_1_fu_263_p2 <= (select_ln309_fu_250_p3 xor Tmp_fu_186_p2);
    xor_ln309_2_fu_269_p2 <= (xor_ln309_fu_258_p2 xor xor_ln309_1_fu_263_p2);
    xor_ln309_fu_258_p2 <= (shl_ln296_1_fu_236_p2 xor buf_r_load_reg_405);
    xor_ln310_1_fu_309_p2 <= (shl_ln296_2_fu_281_p2 xor select_ln310_fu_295_p3);
    xor_ln310_2_fu_315_p2 <= (xor_ln310_fu_303_p2 xor xor_ln310_1_fu_309_p2);
    xor_ln310_fu_303_p2 <= (buf_r_q0 xor Tm_fu_176_p2);
    xor_ln311_1_fu_355_p2 <= (xor_ln311_fu_349_p2 xor shl_ln296_3_fu_327_p2);
    xor_ln311_fu_349_p2 <= (xor_ln307_1_fu_180_p2 xor select_ln311_fu_341_p3);
    zext_ln306_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_121_p3),64));
    zext_ln307_1_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_152_p3),64));
    zext_ln307_2_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_164_p3),64));
    zext_ln307_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_134_p3),64));
end behav;
