-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_240_1_VITIS_LOOP_242_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_val : IN STD_LOGIC_VECTOR (1535 downto 0) );
end;


architecture behav of AES_ECB_encrypt_Cipher_Pipeline_VITIS_LOOP_240_1_VITIS_LOOP_242_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln240_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln239_fu_138_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln239_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln244_fu_154_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln244_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln244_16_fu_158_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln244_16_reg_279 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_addr_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln244_17_fu_228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln244_17_reg_290 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln244_19_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_50 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln242_fu_162_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_54 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln240_fu_146_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_fu_58 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln240_fu_109_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_r_ce1_local : STD_LOGIC;
    signal buf_r_we0_local : STD_LOGIC;
    signal xor_ln244_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_ce0_local : STD_LOGIC;
    signal icmp_ln242_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln240_1_fu_126_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_178_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln244_fu_185_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln244_fu_188_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_199_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln244_20_fu_205_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln244_17_cast_fu_209_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln244_21_fu_219_p1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal lshr_ln244_fu_223_p2 : STD_LOGIC_VECTOR (1535 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AES_ECB_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component AES_ECB_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_54 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_54 <= select_ln240_fu_146_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln240_fu_103_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_58 <= add_ln240_fu_109_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_58 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_50 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_50 <= add_ln242_fu_162_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln239_reg_268 <= select_ln239_fu_138_p3;
                trunc_ln244_16_reg_279 <= trunc_ln244_16_fu_158_p1;
                trunc_ln244_reg_273 <= trunc_ln244_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                buf_r_addr_reg_284 <= zext_ln244_19_fu_194_p1(4 - 1 downto 0);
                trunc_ln244_17_reg_290 <= trunc_ln244_17_fu_228_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln240_1_fu_126_p2 <= std_logic_vector(unsigned(i_fu_54) + unsigned(ap_const_lv3_1));
    add_ln240_fu_109_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv5_1));
    add_ln242_fu_162_p2 <= std_logic_vector(unsigned(select_ln239_fu_138_p3) + unsigned(ap_const_lv3_1));
    add_ln244_fu_188_p2 <= std_logic_vector(unsigned(tmp_s_fu_178_p3) + unsigned(zext_ln244_fu_185_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln240_fu_103_p2)
    begin
        if (((icmp_ln240_fu_103_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_58)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_58;
        end if; 
    end process;

    buf_r_address0 <= buf_r_addr_reg_284;
    buf_r_address1 <= zext_ln244_19_fu_194_p1(4 - 1 downto 0);
    buf_r_ce0 <= buf_r_ce0_local;

    buf_r_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            buf_r_ce0_local <= ap_const_logic_1;
        else 
            buf_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_ce1 <= buf_r_ce1_local;

    buf_r_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce1_local <= ap_const_logic_1;
        else 
            buf_r_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= xor_ln244_fu_232_p2;
    buf_r_we0 <= buf_r_we0_local;

    buf_r_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            buf_r_we0_local <= ap_const_logic_1;
        else 
            buf_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln240_fu_103_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv5_10) else "0";
    icmp_ln242_fu_132_p2 <= "1" when (j_fu_50 = ap_const_lv3_4) else "0";
    lshr_ln244_fu_223_p2 <= std_logic_vector(shift_right(unsigned(RoundKey_val),to_integer(unsigned('0' & zext_ln244_21_fu_219_p1(31-1 downto 0)))));
    select_ln239_fu_138_p3 <= 
        ap_const_lv3_0 when (icmp_ln242_fu_132_p2(0) = '1') else 
        j_fu_50;
    select_ln240_fu_146_p3 <= 
        add_ln240_1_fu_126_p2 when (icmp_ln242_fu_132_p2(0) = '1') else 
        i_fu_54;
    tmp_fu_199_p3 <= (trunc_ln244_reg_273 & trunc_ln244_16_reg_279);
    tmp_s_fu_178_p3 <= (trunc_ln244_reg_273 & ap_const_lv2_0);
    trunc_ln244_16_fu_158_p1 <= select_ln239_fu_138_p3(2 - 1 downto 0);
    trunc_ln244_17_fu_228_p1 <= lshr_ln244_fu_223_p2(8 - 1 downto 0);
    trunc_ln244_fu_154_p1 <= select_ln240_fu_146_p3(2 - 1 downto 0);
    xor_ln244_fu_232_p2 <= (trunc_ln244_17_reg_290 xor buf_r_q1);
    zext_ln244_17_cast_fu_209_p4 <= ((ap_const_lv3_5 & zext_ln244_20_fu_205_p1) & ap_const_lv3_0);
    zext_ln244_19_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_fu_188_p2),64));
    zext_ln244_20_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_199_p3),5));
    zext_ln244_21_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln244_17_cast_fu_209_p4),1536));
    zext_ln244_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln239_reg_268),4));
end behav;
